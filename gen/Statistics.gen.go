// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package gen

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// StatisticsServerInterface 代表所有服务器处理程序。
type StatisticsServerInterface interface {
	// 获取用户组签到统计数据
	// (GET /statistics/groups)
	GetStatisticsGroups(c *gin.Context, params GetStatisticsGroupsParams)
	// 获取用户签到统计数据
	// (GET /statistics/users)
	GetStatisticsUsers(c *gin.Context, params GetStatisticsUsersParams)
}

// StatisticsServerInterfaceWrapper 将上下文转换为参数。
type StatisticsServerInterfaceWrapper struct {
	Handler            StatisticsServerInterface
	HandlerMiddlewares []StatisticsMiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type StatisticsMiddlewareFunc func(c *gin.Context)

// GetStatisticsGroups 操作中间件
func (siw *StatisticsServerInterfaceWrapper) GetStatisticsGroups(c *gin.Context) {

	var err error

	// 参数对象，我们将从上下文中解析所有参数到此对象
	var params GetStatisticsGroupsParams

	// ------------- 可选查询参数 "startDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "startDate", c.Request.URL.Query(), &params.StartDate)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("参数 startDate 格式无效: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- 可选查询参数 "endDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "endDate", c.Request.URL.Query(), &params.EndDate)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("参数 endDate 格式无效: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetStatisticsGroups(c, params)
}

// GetStatisticsUsers 操作中间件
func (siw *StatisticsServerInterfaceWrapper) GetStatisticsUsers(c *gin.Context) {

	var err error

	// 参数对象，我们将从上下文中解析所有参数到此对象
	var params GetStatisticsUsersParams

	// ------------- 可选查询参数 "groupId" -------------

	err = runtime.BindQueryParameter("form", true, false, "groupId", c.Request.URL.Query(), &params.GroupId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("参数 groupId 格式无效: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- 可选查询参数 "startDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "startDate", c.Request.URL.Query(), &params.StartDate)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("参数 startDate 格式无效: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- 可选查询参数 "endDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "endDate", c.Request.URL.Query(), &params.EndDate)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("参数 endDate 格式无效: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetStatisticsUsers(c, params)
}

// StatisticsGinServerOptions 提供 Gin 服务器的选项。
type StatisticsGinServerOptions struct {
	BaseURL      string
	Middlewares  []StatisticsMiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterStatisticsHandlers 创建与 OpenAPI 规范匹配的 http.Handler 路由。
func RegisterStatisticsHandlers(router gin.IRouter, si StatisticsServerInterface) {
	RegisterStatisticsHandlersWithOptions(router, si, StatisticsGinServerOptions{})
}

// RegisterStatisticsHandlersWithOptions 创建带有附加选项的 http.Handler
func RegisterStatisticsHandlersWithOptions(router gin.IRouter, si StatisticsServerInterface, options StatisticsGinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := StatisticsServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/statistics/groups", wrapper.GetStatisticsGroups)
	router.GET(options.BaseURL+"/statistics/users", wrapper.GetStatisticsUsers)
}

type GetStatisticsGroupsRequestObject struct {
	Params GetStatisticsGroupsParams
}

type GetStatisticsGroupsResponseObject interface {
	VisitGetStatisticsGroupsResponse(w http.ResponseWriter) error
}

type GetStatisticsGroups200JSONResponse struct {
	Code string `json:"code"`
	Data []struct {
		// Absent 缺勤次数
		Absent int `json:"absent"`

		// Exception 异常签到次数（包括审核中和已审核）
		Exception int `json:"exception"`

		// GroupId 用户组ID
		GroupId int `json:"groupId"`

		// GroupName 用户组名称
		GroupName string `json:"groupName"`

		// Success 成功签到次数
		Success int `json:"success"`
	} `json:"data"`
}

func (response GetStatisticsGroups200JSONResponse) VisitGetStatisticsGroupsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetStatisticsGroups401JSONResponse struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

func (response GetStatisticsGroups401JSONResponse) VisitGetStatisticsGroupsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetStatisticsGroups403JSONResponse struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

func (response GetStatisticsGroups403JSONResponse) VisitGetStatisticsGroupsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetStatisticsGroups500JSONResponse InternalServerError

func (response GetStatisticsGroups500JSONResponse) VisitGetStatisticsGroupsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetStatisticsUsersRequestObject struct {
	Params GetStatisticsUsersParams
}

type GetStatisticsUsersResponseObject interface {
	VisitGetStatisticsUsersResponse(w http.ResponseWriter) error
}

type GetStatisticsUsers200JSONResponse struct {
	Code string `json:"code"`
	Data []struct {
		// Absent 缺勤次数
		Absent int `json:"absent"`

		// Exception 异常签到次数（包括审核中和已审核）
		Exception int `json:"exception"`

		// GroupId 用户组ID
		GroupId int `json:"groupId"`

		// GroupName 用户组名称
		GroupName string `json:"groupName"`

		// Success 成功签到次数
		Success int `json:"success"`

		// UserId 用户ID
		UserId int `json:"userId"`

		// Username 用户名
		Username string `json:"username"`
	} `json:"data"`
}

func (response GetStatisticsUsers200JSONResponse) VisitGetStatisticsUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetStatisticsUsers401JSONResponse struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

func (response GetStatisticsUsers401JSONResponse) VisitGetStatisticsUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetStatisticsUsers403JSONResponse struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

func (response GetStatisticsUsers403JSONResponse) VisitGetStatisticsUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetStatisticsUsers500JSONResponse InternalServerError

func (response GetStatisticsUsers500JSONResponse) VisitGetStatisticsUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StatisticsStrictServerInterface represents all server handlers.
type StatisticsStrictServerInterface interface {
	// 获取用户组签到统计数据
	// (GET /statistics/groups)
	GetStatisticsGroups(ctx context.Context, request GetStatisticsGroupsRequestObject) (GetStatisticsGroupsResponseObject, error)
	// 获取用户签到统计数据
	// (GET /statistics/users)
	GetStatisticsUsers(ctx context.Context, request GetStatisticsUsersRequestObject) (GetStatisticsUsersResponseObject, error)
}

type StatisticsStrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StatisticsStrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStatisticsStrictHandler(ssi StatisticsStrictServerInterface, middlewares []StatisticsStrictMiddlewareFunc) StatisticsServerInterface {
	return &StatisticsstrictHandler{ssi: ssi, middlewares: middlewares}
}

type StatisticsstrictHandler struct {
	ssi         StatisticsStrictServerInterface
	middlewares []StatisticsStrictMiddlewareFunc
}

// GetStatisticsGroups 操作中间件
func (sh *StatisticsstrictHandler) GetStatisticsGroups(ctx *gin.Context, params GetStatisticsGroupsParams) {
	var request GetStatisticsGroupsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetStatisticsGroups(ctx, request.(GetStatisticsGroupsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetStatisticsGroups")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetStatisticsGroupsResponseObject); ok {
		if err := validResponse.VisitGetStatisticsGroupsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetStatisticsUsers 操作中间件
func (sh *StatisticsstrictHandler) GetStatisticsUsers(ctx *gin.Context, params GetStatisticsUsersParams) {
	var request GetStatisticsUsersRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetStatisticsUsers(ctx, request.(GetStatisticsUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetStatisticsUsers")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetStatisticsUsersResponseObject); ok {
		if err := validResponse.VisitGetStatisticsUsersResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
