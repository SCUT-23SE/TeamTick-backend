// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package gen

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// ExportServerInterface 代表所有服务器处理程序。
type ExportServerInterface interface {
	// 导出签到记录为XLSX文件
	// (GET /export/checkins.xlsx)
	GetExportCheckinsXlsx(c *gin.Context, params GetExportCheckinsXlsxParams)
}

// ExportServerInterfaceWrapper 将上下文转换为参数。
type ExportServerInterfaceWrapper struct {
	Handler            ExportServerInterface
	HandlerMiddlewares []ExportMiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type ExportMiddlewareFunc func(c *gin.Context)

// GetExportCheckinsXlsx 操作中间件
func (siw *ExportServerInterfaceWrapper) GetExportCheckinsXlsx(c *gin.Context) {

	var err error

	// 参数对象，我们将从上下文中解析所有参数到此对象
	var params GetExportCheckinsXlsxParams

	// ------------- 必需查询参数 "groupIds" -------------

	if paramValue := c.Query("groupIds"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("必需的查询参数 groupIds 未找到"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "groupIds", c.Request.URL.Query(), &params.GroupIds)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("参数 groupIds 格式无效: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- 必需查询参数 "dateStart" -------------

	if paramValue := c.Query("dateStart"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("必需的查询参数 dateStart 未找到"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "dateStart", c.Request.URL.Query(), &params.DateStart)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("参数 dateStart 格式无效: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- 必需查询参数 "dateEnd" -------------

	if paramValue := c.Query("dateEnd"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("必需的查询参数 dateEnd 未找到"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "dateEnd", c.Request.URL.Query(), &params.DateEnd)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("参数 dateEnd 格式无效: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- 可选查询参数 "statuses" -------------

	err = runtime.BindQueryParameter("form", true, false, "statuses", c.Request.URL.Query(), &params.Statuses)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("参数 statuses 格式无效: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetExportCheckinsXlsx(c, params)
}

// ExportGinServerOptions 提供 Gin 服务器的选项。
type ExportGinServerOptions struct {
	BaseURL      string
	Middlewares  []ExportMiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterExportHandlers 创建与 OpenAPI 规范匹配的 http.Handler 路由。
func RegisterExportHandlers(router gin.IRouter, si ExportServerInterface) {
	RegisterExportHandlersWithOptions(router, si, ExportGinServerOptions{})
}

// RegisterExportHandlersWithOptions 创建带有附加选项的 http.Handler
func RegisterExportHandlersWithOptions(router gin.IRouter, si ExportServerInterface, options ExportGinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ExportServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/export/checkins.xlsx", wrapper.GetExportCheckinsXlsx)
}

type GetExportCheckinsXlsxRequestObject struct {
	Params GetExportCheckinsXlsxParams
}

type GetExportCheckinsXlsxResponseObject interface {
	VisitGetExportCheckinsXlsxResponse(w http.ResponseWriter) error
}

type GetExportCheckinsXlsx200ApplicationvndOpenxmlformatsOfficedocumentSpreadsheetmlSheetResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response GetExportCheckinsXlsx200ApplicationvndOpenxmlformatsOfficedocumentSpreadsheetmlSheetResponse) VisitGetExportCheckinsXlsxResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type GetExportCheckinsXlsx400JSONResponse struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

func (response GetExportCheckinsXlsx400JSONResponse) VisitGetExportCheckinsXlsxResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetExportCheckinsXlsx401JSONResponse struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

func (response GetExportCheckinsXlsx401JSONResponse) VisitGetExportCheckinsXlsxResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetExportCheckinsXlsx403JSONResponse struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

func (response GetExportCheckinsXlsx403JSONResponse) VisitGetExportCheckinsXlsxResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetExportCheckinsXlsx500JSONResponse InternalServerError

func (response GetExportCheckinsXlsx500JSONResponse) VisitGetExportCheckinsXlsxResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// ExportStrictServerInterface represents all server handlers.
type ExportStrictServerInterface interface {
	// 导出签到记录为XLSX文件
	// (GET /export/checkins.xlsx)
	GetExportCheckinsXlsx(ctx context.Context, request GetExportCheckinsXlsxRequestObject) (GetExportCheckinsXlsxResponseObject, error)
}

type ExportStrictHandlerFunc = strictgin.StrictGinHandlerFunc
type ExportStrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewExportStrictHandler(ssi ExportStrictServerInterface, middlewares []ExportStrictMiddlewareFunc) ExportServerInterface {
	return &ExportstrictHandler{ssi: ssi, middlewares: middlewares}
}

type ExportstrictHandler struct {
	ssi         ExportStrictServerInterface
	middlewares []ExportStrictMiddlewareFunc
}

// GetExportCheckinsXlsx 操作中间件
func (sh *ExportstrictHandler) GetExportCheckinsXlsx(ctx *gin.Context, params GetExportCheckinsXlsxParams) {
	var request GetExportCheckinsXlsxRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetExportCheckinsXlsx(ctx, request.(GetExportCheckinsXlsxRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetExportCheckinsXlsx")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetExportCheckinsXlsxResponseObject); ok {
		if err := validResponse.VisitGetExportCheckinsXlsxResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
