// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package gen

import (
	"encoding/json"

	"github.com/oapi-codegen/runtime"
)

// Defines values for BaseResponseCode.
const (
	N0 BaseResponseCode = 0
	N1 BaseResponseCode = 1
)

// Defines values for GroupMembershipStatus.
const (
	GroupMembershipStatusMember   GroupMembershipStatus = "member"
	GroupMembershipStatusNone     GroupMembershipStatus = "none"
	GroupMembershipStatusPending  GroupMembershipStatus = "pending"
	GroupMembershipStatusRejected GroupMembershipStatus = "rejected"
)

// Defines values for GroupRole.
const (
	GroupRoleAdmin  GroupRole = "admin"
	GroupRoleMember GroupRole = "member"
)

// Defines values for JoinRequestStatus.
const (
	JoinRequestStatusApproved JoinRequestStatus = "approved"
	JoinRequestStatusPending  JoinRequestStatus = "pending"
	JoinRequestStatusRejected JoinRequestStatus = "rejected"
)

// Defines values for RequestQueryStatus.
const (
	RequestQueryStatusAll       RequestQueryStatus = "all"
	RequestQueryStatusPending   RequestQueryStatus = "pending"
	RequestQueryStatusProcessed RequestQueryStatus = "processed"
)

// Defines values for GetGroupsParamsFilter.
const (
	Created GetGroupsParamsFilter = "created"
	Joined  GetGroupsParamsFilter = "joined"
)

// Defines values for PutGroupsGroupIdJoinRequestsRequestIdJSONBodyAction.
const (
	Approve PutGroupsGroupIdJoinRequestsRequestIdJSONBodyAction = "approve"
	Reject  PutGroupsGroupIdJoinRequestsRequestIdJSONBodyAction = "reject"
)

// BaseResponse defines model for BaseResponse.
type BaseResponse struct {
	// Code 响应码，0表示成功，1表示失败
	Code BaseResponseCode `json:"code"`
}

// BaseResponseCode 响应码，0表示成功，1表示失败
type BaseResponseCode int

// Group defines model for Group.
type Group struct {
	// CreatedAt 创建时间（Unix时间戳，单位：秒）
	CreatedAt int `json:"createdAt,omitempty"`

	// CreatorId 创建者用户ID
	CreatorId int `json:"creatorId,omitempty"`

	// CreatorName 创建者用户名
	CreatorName string `json:"creatorName,omitempty"`

	// Description 用户组描述
	Description string `json:"description,omitempty"`

	// GroupId 用户组ID
	GroupId int `json:"groupId,omitempty"`

	// GroupName 用户组名称
	GroupName string `json:"groupName,omitempty"`

	// MemberCount 成员数量
	MemberCount int `json:"memberCount,omitempty"`
}

// GroupMember defines model for GroupMember.
type GroupMember struct {
	// JoinedAt 加入时间（Unix时间戳，单位：秒）
	JoinedAt int `json:"joinedAt,omitempty"`

	// Role 用户在组中的角色，如'admin'或'member'
	Role string `json:"role,omitempty"`

	// UserId 用户ID
	UserId int `json:"userId,omitempty"`

	// Username 用户名
	Username string `json:"username,omitempty"`
}

// GroupMembershipStatus 用户在组中的状态：none(未关联)、pending(申请中)、member(普通成员)、rejected(申请被拒绝)
type GroupMembershipStatus string

// GroupRole defines model for GroupRole.
type GroupRole string

// JoinRequest defines model for JoinRequest.
type JoinRequest struct {
	// GroupId 用户组ID
	GroupId int `json:"groupId,omitempty"`

	// RequestId 申请ID
	RequestId int `json:"requestId,omitempty"`

	// RequestedAt 申请时间（Unix时间戳，单位：秒）
	RequestedAt int `json:"requestedAt,omitempty"`

	// Status 申请状态
	Status JoinRequestStatus `json:"status,omitempty"`

	// UserId 申请用户ID
	UserId int `json:"userId,omitempty"`

	// Username 申请用户名
	Username string `json:"username,omitempty"`
}

// JoinRequestStatus 申请状态
type JoinRequestStatus string

// RequestQueryStatus defines model for RequestQueryStatus.
type RequestQueryStatus string

// SuccessWithData defines model for SuccessWithData.
type SuccessWithData struct {
	Code string               `json:"code"`
	Data SuccessWithData_Data `json:"data"`
}

// SuccessWithDataData0 具体数据结构需在各API中定义
type SuccessWithDataData0 = map[string]interface{}

// SuccessWithDataData1 具体数据结构需在各API中定义
type SuccessWithDataData1 = []string

// SuccessWithData_Data defines model for SuccessWithData.Data.
type SuccessWithData_Data struct {
	union json.RawMessage
}

// User defines model for User.
type User struct {
	// UserId 用户ID
	UserId int `json:"userId,omitempty"`

	// Username 用户名
	Username string `json:"username,omitempty"`
}

// PostAuthLoginJSONBody defines parameters for PostAuthLogin.
type PostAuthLoginJSONBody struct {
	// Password 密码
	Password string `binding:"required" json:"password,omitempty"`

	// Username 用户名
	Username string `binding:"required" json:"username"`
}

// PostAuthRegisterJSONBody defines parameters for PostAuthRegister.
type PostAuthRegisterJSONBody struct {
	// Password 密码
	Password string `binding:"required,min=6,max=128" json:"password,omitempty"`

	// Username 用户名
	Username string `binding:"required,min=3,max=50" json:"username"`
}

// GetGroupsParams defines parameters for GetGroups.
type GetGroupsParams struct {
	// Filter 筛选条件: `created` (我创建的), `joined` (我加入的)。不传则返回所有相关的。
	Filter *GetGroupsParamsFilter `form:"filter,omitempty" json:"filter,omitempty"`
}

// GetGroupsParamsFilter defines parameters for GetGroups.
type GetGroupsParamsFilter string

// PostGroupsJSONBody defines parameters for PostGroups.
type PostGroupsJSONBody struct {
	// Description 用户组描述
	Description string `binding:"omitempty,max=255" json:"description,omitempty"`

	// GroupName 用户组名称
	GroupName string `binding:"required,min=1,max=50" json:"groupName"`
}

// PutGroupsGroupIdJSONBody defines parameters for PutGroupsGroupId.
type PutGroupsGroupIdJSONBody struct {
	// Description 新的用户组描述
	Description string `binding:"required,max=255" json:"description"`

	// GroupName 新的用户组名称
	GroupName string `binding:"required,min=1,max=50" json:"groupName"`
}

// GetGroupsGroupIdJoinRequestsParams defines parameters for GetGroupsGroupIdJoinRequests.
type GetGroupsGroupIdJoinRequestsParams struct {
	// Status 筛选状态: `pending` (默认), `approved`, `rejected`, `all`。
	Status *RequestQueryStatus `form:"status,omitempty" json:"status,omitempty"`
}

// PostGroupsGroupIdJoinRequestsJSONBody defines parameters for PostGroupsGroupIdJoinRequests.
type PostGroupsGroupIdJoinRequestsJSONBody struct {
	// Reason 申请理由 (可选)
	Reason string `binding:"omitempty,max=255" json:"reason,omitempty"`
}

// PutGroupsGroupIdJoinRequestsRequestIdJSONBody defines parameters for PutGroupsGroupIdJoinRequestsRequestId.
type PutGroupsGroupIdJoinRequestsRequestIdJSONBody struct {
	// Action 处理动作
	Action PutGroupsGroupIdJoinRequestsRequestIdJSONBodyAction `binding:"required,oneof=approve reject" json:"action"`

	// RejectReason 拒绝理由 (当 action 为 reject 时可选)
	RejectReason string `binding:"omitempty,max=255" json:"rejectReason,omitempty"`
}

// PutGroupsGroupIdJoinRequestsRequestIdJSONBodyAction defines parameters for PutGroupsGroupIdJoinRequestsRequestId.
type PutGroupsGroupIdJoinRequestsRequestIdJSONBodyAction string

// PostAuthLoginJSONRequestBody defines body for PostAuthLogin for application/json ContentType.
type PostAuthLoginJSONRequestBody PostAuthLoginJSONBody

// PostAuthRegisterJSONRequestBody defines body for PostAuthRegister for application/json ContentType.
type PostAuthRegisterJSONRequestBody PostAuthRegisterJSONBody

// PostGroupsJSONRequestBody defines body for PostGroups for application/json ContentType.
type PostGroupsJSONRequestBody PostGroupsJSONBody

// PutGroupsGroupIdJSONRequestBody defines body for PutGroupsGroupId for application/json ContentType.
type PutGroupsGroupIdJSONRequestBody PutGroupsGroupIdJSONBody

// PostGroupsGroupIdJoinRequestsJSONRequestBody defines body for PostGroupsGroupIdJoinRequests for application/json ContentType.
type PostGroupsGroupIdJoinRequestsJSONRequestBody PostGroupsGroupIdJoinRequestsJSONBody

// PutGroupsGroupIdJoinRequestsRequestIdJSONRequestBody defines body for PutGroupsGroupIdJoinRequestsRequestId for application/json ContentType.
type PutGroupsGroupIdJoinRequestsRequestIdJSONRequestBody PutGroupsGroupIdJoinRequestsRequestIdJSONBody

// AsSuccessWithDataData0 returns the union data inside the SuccessWithData_Data as a SuccessWithDataData0
func (t SuccessWithData_Data) AsSuccessWithDataData0() (SuccessWithDataData0, error) {
	var body SuccessWithDataData0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSuccessWithDataData0 overwrites any union data inside the SuccessWithData_Data as the provided SuccessWithDataData0
func (t *SuccessWithData_Data) FromSuccessWithDataData0(v SuccessWithDataData0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSuccessWithDataData0 performs a merge with any union data inside the SuccessWithData_Data, using the provided SuccessWithDataData0
func (t *SuccessWithData_Data) MergeSuccessWithDataData0(v SuccessWithDataData0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSuccessWithDataData1 returns the union data inside the SuccessWithData_Data as a SuccessWithDataData1
func (t SuccessWithData_Data) AsSuccessWithDataData1() (SuccessWithDataData1, error) {
	var body SuccessWithDataData1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSuccessWithDataData1 overwrites any union data inside the SuccessWithData_Data as the provided SuccessWithDataData1
func (t *SuccessWithData_Data) FromSuccessWithDataData1(v SuccessWithDataData1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSuccessWithDataData1 performs a merge with any union data inside the SuccessWithData_Data, using the provided SuccessWithDataData1
func (t *SuccessWithData_Data) MergeSuccessWithDataData1(v SuccessWithDataData1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t SuccessWithData_Data) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SuccessWithData_Data) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
