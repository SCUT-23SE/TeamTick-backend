// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package gen

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// AuthServerInterface 代表所有服务器处理程序。
type AuthServerInterface interface {
	// 管理员登录
	// (POST /auth/admin/login)
	PostAuthAdminLogin(c *gin.Context)
	// 用户登录
	// (POST /auth/login)
	PostAuthLogin(c *gin.Context)
	// 验证邮箱并进行用户注册
	// (POST /auth/register)
	PostAuthRegister(c *gin.Context)
	// 重置密码
	// (POST /auth/reset-password)
	PostAuthResetPassword(c *gin.Context)
	// 发送验证码
	// (POST /auth/send-verification-code)
	PostAuthSendVerificationCode(c *gin.Context)
}

// AuthServerInterfaceWrapper 将上下文转换为参数。
type AuthServerInterfaceWrapper struct {
	Handler            AuthServerInterface
	HandlerMiddlewares []AuthMiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type AuthMiddlewareFunc func(c *gin.Context)

// PostAuthAdminLogin 操作中间件
func (siw *AuthServerInterfaceWrapper) PostAuthAdminLogin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAuthAdminLogin(c)
}

// PostAuthLogin 操作中间件
func (siw *AuthServerInterfaceWrapper) PostAuthLogin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAuthLogin(c)
}

// PostAuthRegister 操作中间件
func (siw *AuthServerInterfaceWrapper) PostAuthRegister(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAuthRegister(c)
}

// PostAuthResetPassword 操作中间件
func (siw *AuthServerInterfaceWrapper) PostAuthResetPassword(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAuthResetPassword(c)
}

// PostAuthSendVerificationCode 操作中间件
func (siw *AuthServerInterfaceWrapper) PostAuthSendVerificationCode(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAuthSendVerificationCode(c)
}

// AuthGinServerOptions 提供 Gin 服务器的选项。
type AuthGinServerOptions struct {
	BaseURL      string
	Middlewares  []AuthMiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterAuthHandlers 创建与 OpenAPI 规范匹配的 http.Handler 路由。
func RegisterAuthHandlers(router gin.IRouter, si AuthServerInterface) {
	RegisterAuthHandlersWithOptions(router, si, AuthGinServerOptions{})
}

// RegisterAuthHandlersWithOptions 创建带有附加选项的 http.Handler
func RegisterAuthHandlersWithOptions(router gin.IRouter, si AuthServerInterface, options AuthGinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := AuthServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/auth/admin/login", wrapper.PostAuthAdminLogin)
	router.POST(options.BaseURL+"/auth/login", wrapper.PostAuthLogin)
	router.POST(options.BaseURL+"/auth/register", wrapper.PostAuthRegister)
	router.POST(options.BaseURL+"/auth/reset-password", wrapper.PostAuthResetPassword)
	router.POST(options.BaseURL+"/auth/send-verification-code", wrapper.PostAuthSendVerificationCode)
}

type PostAuthAdminLoginRequestObject struct {
	Body *PostAuthAdminLoginJSONRequestBody
}

type PostAuthAdminLoginResponseObject interface {
	VisitPostAuthAdminLoginResponse(w http.ResponseWriter) error
}

type PostAuthAdminLogin200JSONResponse struct {
	Code string `json:"code"`
	Data struct {
		// ManagedGroups 管理的群组列表
		ManagedGroups *[]struct {
			// GroupId 群组ID
			GroupId int `json:"groupId,omitempty"`

			// GroupName 群组名称
			GroupName string `json:"groupName,omitempty"`
		} `json:"managedGroups,omitempty"`

		// Token 管理员 JWT 令牌
		Token string `json:"token,omitempty"`

		// UserId 用户ID
		UserId int `json:"userId,omitempty"`

		// Username 用户名
		Username string `json:"username,omitempty"`
	} `json:"data"`
}

func (response PostAuthAdminLogin200JSONResponse) VisitPostAuthAdminLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthAdminLogin400JSONResponse BadRequest

func (response PostAuthAdminLogin400JSONResponse) VisitPostAuthAdminLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthAdminLogin401JSONResponse Unauthorized

func (response PostAuthAdminLogin401JSONResponse) VisitPostAuthAdminLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthAdminLogin403JSONResponse Forbidden

func (response PostAuthAdminLogin403JSONResponse) VisitPostAuthAdminLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthAdminLogin500JSONResponse InternalServerError

func (response PostAuthAdminLogin500JSONResponse) VisitPostAuthAdminLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthLoginRequestObject struct {
	Body *PostAuthLoginJSONRequestBody
}

type PostAuthLoginResponseObject interface {
	VisitPostAuthLoginResponse(w http.ResponseWriter) error
}

type PostAuthLogin200JSONResponse struct {
	Code string `json:"code"`
	Data struct {
		// Token JWT 令牌
		Token string `json:"token,omitempty"`

		// UserId 用户ID
		UserId int `json:"userId,omitempty"`

		// Username 用户名
		Username string `json:"username,omitempty"`
	} `json:"data"`
}

func (response PostAuthLogin200JSONResponse) VisitPostAuthLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthLogin400JSONResponse BadRequest

func (response PostAuthLogin400JSONResponse) VisitPostAuthLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthLogin401JSONResponse Unauthorized

func (response PostAuthLogin401JSONResponse) VisitPostAuthLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthLogin500JSONResponse InternalServerError

func (response PostAuthLogin500JSONResponse) VisitPostAuthLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthRegisterRequestObject struct {
	Body *PostAuthRegisterJSONRequestBody
}

type PostAuthRegisterResponseObject interface {
	VisitPostAuthRegisterResponse(w http.ResponseWriter) error
}

type PostAuthRegister201JSONResponse struct {
	Code string `json:"code"`
	Data User   `json:"data"`
}

func (response PostAuthRegister201JSONResponse) VisitPostAuthRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthRegister400JSONResponse BadRequest

func (response PostAuthRegister400JSONResponse) VisitPostAuthRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthRegister401JSONResponse Unauthorized

func (response PostAuthRegister401JSONResponse) VisitPostAuthRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthRegister409JSONResponse Conflict

func (response PostAuthRegister409JSONResponse) VisitPostAuthRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthRegister410JSONResponse Gone

func (response PostAuthRegister410JSONResponse) VisitPostAuthRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(410)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthRegister500JSONResponse InternalServerError

func (response PostAuthRegister500JSONResponse) VisitPostAuthRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthResetPasswordRequestObject struct {
	Body *PostAuthResetPasswordJSONRequestBody
}

type PostAuthResetPasswordResponseObject interface {
	VisitPostAuthResetPasswordResponse(w http.ResponseWriter) error
}

type PostAuthResetPassword200JSONResponse Success

func (response PostAuthResetPassword200JSONResponse) VisitPostAuthResetPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthResetPassword400JSONResponse BadRequest

func (response PostAuthResetPassword400JSONResponse) VisitPostAuthResetPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthResetPassword401JSONResponse Unauthorized

func (response PostAuthResetPassword401JSONResponse) VisitPostAuthResetPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthResetPassword404JSONResponse NotFound

func (response PostAuthResetPassword404JSONResponse) VisitPostAuthResetPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthResetPassword410JSONResponse Gone

func (response PostAuthResetPassword410JSONResponse) VisitPostAuthResetPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(410)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthResetPassword500JSONResponse InternalServerError

func (response PostAuthResetPassword500JSONResponse) VisitPostAuthResetPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthSendVerificationCodeRequestObject struct {
	Body *PostAuthSendVerificationCodeJSONRequestBody
}

type PostAuthSendVerificationCodeResponseObject interface {
	VisitPostAuthSendVerificationCodeResponse(w http.ResponseWriter) error
}

type PostAuthSendVerificationCode200JSONResponse struct {
	Code    string                  `json:"code"`
	Data    *map[string]interface{} `json:"data,omitempty"`
	Message *string                 `json:"message,omitempty"`
}

func (response PostAuthSendVerificationCode200JSONResponse) VisitPostAuthSendVerificationCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthSendVerificationCode400JSONResponse BadRequest

func (response PostAuthSendVerificationCode400JSONResponse) VisitPostAuthSendVerificationCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthSendVerificationCode404JSONResponse NotFound

func (response PostAuthSendVerificationCode404JSONResponse) VisitPostAuthSendVerificationCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthSendVerificationCode409JSONResponse Conflict

func (response PostAuthSendVerificationCode409JSONResponse) VisitPostAuthSendVerificationCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthSendVerificationCode410JSONResponse Gone

func (response PostAuthSendVerificationCode410JSONResponse) VisitPostAuthSendVerificationCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(410)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthSendVerificationCode429JSONResponse struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

func (response PostAuthSendVerificationCode429JSONResponse) VisitPostAuthSendVerificationCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthSendVerificationCode500JSONResponse InternalServerError

func (response PostAuthSendVerificationCode500JSONResponse) VisitPostAuthSendVerificationCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// AuthStrictServerInterface represents all server handlers.
type AuthStrictServerInterface interface {
	// 管理员登录
	// (POST /auth/admin/login)
	PostAuthAdminLogin(ctx context.Context, request PostAuthAdminLoginRequestObject) (PostAuthAdminLoginResponseObject, error)
	// 用户登录
	// (POST /auth/login)
	PostAuthLogin(ctx context.Context, request PostAuthLoginRequestObject) (PostAuthLoginResponseObject, error)
	// 验证邮箱并进行用户注册
	// (POST /auth/register)
	PostAuthRegister(ctx context.Context, request PostAuthRegisterRequestObject) (PostAuthRegisterResponseObject, error)
	// 重置密码
	// (POST /auth/reset-password)
	PostAuthResetPassword(ctx context.Context, request PostAuthResetPasswordRequestObject) (PostAuthResetPasswordResponseObject, error)
	// 发送验证码
	// (POST /auth/send-verification-code)
	PostAuthSendVerificationCode(ctx context.Context, request PostAuthSendVerificationCodeRequestObject) (PostAuthSendVerificationCodeResponseObject, error)
}

type AuthStrictHandlerFunc = strictgin.StrictGinHandlerFunc
type AuthStrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewAuthStrictHandler(ssi AuthStrictServerInterface, middlewares []AuthStrictMiddlewareFunc) AuthServerInterface {
	return &AuthstrictHandler{ssi: ssi, middlewares: middlewares}
}

type AuthstrictHandler struct {
	ssi         AuthStrictServerInterface
	middlewares []AuthStrictMiddlewareFunc
}

// PostAuthAdminLogin 操作中间件
func (sh *AuthstrictHandler) PostAuthAdminLogin(ctx *gin.Context) {
	var request PostAuthAdminLoginRequestObject

	var body PostAuthAdminLoginJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostAuthAdminLogin(ctx, request.(PostAuthAdminLoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAuthAdminLogin")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostAuthAdminLoginResponseObject); ok {
		if err := validResponse.VisitPostAuthAdminLoginResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostAuthLogin 操作中间件
func (sh *AuthstrictHandler) PostAuthLogin(ctx *gin.Context) {
	var request PostAuthLoginRequestObject

	var body PostAuthLoginJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostAuthLogin(ctx, request.(PostAuthLoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAuthLogin")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostAuthLoginResponseObject); ok {
		if err := validResponse.VisitPostAuthLoginResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostAuthRegister 操作中间件
func (sh *AuthstrictHandler) PostAuthRegister(ctx *gin.Context) {
	var request PostAuthRegisterRequestObject

	var body PostAuthRegisterJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostAuthRegister(ctx, request.(PostAuthRegisterRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAuthRegister")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostAuthRegisterResponseObject); ok {
		if err := validResponse.VisitPostAuthRegisterResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostAuthResetPassword 操作中间件
func (sh *AuthstrictHandler) PostAuthResetPassword(ctx *gin.Context) {
	var request PostAuthResetPasswordRequestObject

	var body PostAuthResetPasswordJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostAuthResetPassword(ctx, request.(PostAuthResetPasswordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAuthResetPassword")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostAuthResetPasswordResponseObject); ok {
		if err := validResponse.VisitPostAuthResetPasswordResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostAuthSendVerificationCode 操作中间件
func (sh *AuthstrictHandler) PostAuthSendVerificationCode(ctx *gin.Context) {
	var request PostAuthSendVerificationCodeRequestObject

	var body PostAuthSendVerificationCodeJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostAuthSendVerificationCode(ctx, request.(PostAuthSendVerificationCodeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAuthSendVerificationCode")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostAuthSendVerificationCodeResponseObject); ok {
		if err := validResponse.VisitPostAuthSendVerificationCodeResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
